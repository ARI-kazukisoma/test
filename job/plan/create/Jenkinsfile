def inputParam = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'UUID', description: 'UUID')
  }
  stages {
    stage("jsonファイルからパラメータ取得") {
      steps {
        script {
          def json = load("lib/json.groovy")
          try {
            def filePath = "${env.TMP_PARAMETER_PATH}/${params.UUID}.json"
            inputParam = json.read(filePath)
            json.delete(filePath)
          } catch(java.nio.file.NoSuchFileException e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY001')
            slack.errorMessage("admin_channel", message)
            error(message)
          }
        }
      }
    }
    stage("インフラ作成") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ]
          ]
          try {
            build job: 'インフラ開発環境構築', parameters: parameters
          } catch(Exception e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY003')
            slack.errorMessage("admin_channel", message)
            slack.errorMessage("planner_channel", message)
            error(message)
          } 
        }
      }
    }
    stage("アプリ・マスターデータ更新(並行処理)") {
      parallel {
        stage("マスターデータ更新") {
          steps {
            sh "sleep 10"
            echo "aaaaaaaaa"
            script {
              def parameters = [
                [
                  $class: 'StringParameterValue',
                  name: 'ENV',
                  value: inputParam.target_env
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'BRANCH',
                  value: inputParam.branch
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'MASTER_TAGS',
                  value: inputParam.original_master_tags
                ]
              ]
              try {
                build job: 'マスターデータ更新', parameters: parameters
              } catch(Exception e) {
                def slack = load("lib/slack.groovy")
                def template = load("lib/template.groovy")
                message = template.getSafetyError('SFY004')
                slack.errorMessage("admin_channel", message)
                slack.errorMessage("planner_channel", message)
                error(message)
              } 
            }
          }
        }
        stage("アプリバージョン更新") {
          steps {
            script {
              sh "sleep 10"
              echo "bbbbbbbb"
              def parameters = [
                [
                  $class: 'StringParameterValue',
                  name: 'ENV',
                  value: inputParam.target_env
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'BRANCH',
                  value: inputParam.branch
                ]
              ]
              try {
                build job: 'アプリバージョン更新', parameters: parameters
              } catch(Exception e) {
                def slack = load("lib/slack.groovy")
                def template = load("lib/template.groovy")
                message = template.getSafetyError('SFY005')
                slack.errorMessage("admin_channel", message)
                slack.errorMessage("planner_channel", message)
                error(message)
              }           
            }
          }
        }
      }
    }
    // TODO (m.toga) 並行処理が問題なければ削除
    // stage("マスターデータ更新") {
    //   steps {
    //     script {
    //       def parameters = [
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'ENV',
    //           value: inputParam.target_env
    //         ],
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'BRANCH',
    //           value: inputParam.branch
    //         ],
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'MASTER_TAGS',
    //           value: inputParam.original_master_tags
    //         ]
    //       ]
    //       try {
    //         build job: 'マスターデータ更新', parameters: parameters
    //       } catch(Exception e) {
    //         def slack = load("lib/slack.groovy")
    //         def template = load("lib/template.groovy")
    //         message = template.getSafetyError('SFY004')
    //         slack.errorMessage("admin_channel", message)
    //         slack.errorMessage("planner_channel", message)
    //         error(message)
    //       } 
    //     }
    //   }
    // }
    // stage("アプリバージョン更新") {
    //   steps {
    //     script {
    //       def parameters = [
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'ENV',
    //           value: inputParam.target_env
    //         ],
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'BRANCH',
    //           value: inputParam.branch
    //         ]
    //       ]
    //       try {
    //         build job: 'アプリバージョン更新', parameters: parameters
    //       } catch(Exception e) {
    //         def slack = load("lib/slack.groovy")
    //         def template = load("lib/template.groovy")
    //         message = template.getSafetyError('SFY005')
    //         slack.errorMessage("admin_channel", message)
    //         slack.errorMessage("planner_channel", message)
    //         error(message)
    //       }           
    //     }
    //   }
    // }
    stage("構成情報保管") {
      steps {
        script {
          def json = load("lib/json.groovy")
          def CONSTS = load("constant/main.groovy").getAll()
          def datetime = load("lib/datetime.groovy")
          def common = [
            'request_user': inputParam.request_user,
            'request_datetime': inputParam.request_datetime,
            'env': inputParam.target_env,
            'reason': inputParam.reason,
            'update_datetime': inputParam.request_datetime,
            'create_datetime': datetime.now(),
          ]

          // common.json作成
          fileName = CONSTS.ENV_CONF_FILE_NAME.COMMON
          json.createTmpEnvConfFile(common, inputParam.target_env, fileName)

          // 構成ファイルをtmpから正式なディレクトリにコピーする
          json.createAllEnvConfFile(inputParam.target_env)
        }
      }
    }
    stage("Slackへ結果送信") {
      steps {
        script {
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def CONSTS = load("constant/main.groovy").getAll()

          def binding = [
            'uuid': params.UUID,
            'request_user': inputParam.request_user,
            'request_datetime': inputParam.request_datetime,
            'target_env': inputParam.target_env,
            'branch': inputParam.branch,
            'master_tags': inputParam.original_master_tags
          ]
          message = template.toString('success_create_env.template', binding)
          slack.notifyMessage("admin_channel", message, CONSTS)
          slack.notifyMessage("planner_channel", message, CONSTS)
        }
      }
    }
  }
}