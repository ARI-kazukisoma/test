def input_param = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'UUID', description: 'UUID')
  }
  stages {
    stage("jsonファイルからパラメータ取得") {
      steps {
        script {
          def json = load("lib/json.groovy")
          def slack = load("lib/slack.groovy")
          try {
            def filePath = "${env.TMP_PARAMETER_PATH}/${params.UUID}.json"
          } catch(java.nio.file.NoSuchFileException e) {
            
            // TODO (m.toga) あとでテンプレート化する
            def message = "すでに申請は承認されたか拒否されております。(UUID: ${params.UUID}" 
            slack.notifyMessage("#hooktest", message)
            error("すでに申請は承認されたか拒否されております。(UUID: ${params.UUID}")
          }
          input_param = json.read(filePath)
          // json.delete(filePath)
        }
      }
    }
    stage("インフラ作成") {
      steps {
        script {
          echo input_param.ENV
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: input_param.target_env
            ]
          ]
          try {
            build job: 'インフラ開発環境構築', parameters: parameters
            sh "exit 1"
          } catch(Exception e) {
            def slack = load("lib/slack.groovy")

            def message = "「インフラ開発環境構築」ジョブにて何らかのエラーが発生(UUID: ${params.UUID})"
            slack.notifyMessage("#hooktest", message)
            error("「インフラ開発環境構築」ジョブにて何らかのエラーが発生(UUID: ${params.UUID})")
          } 
        }
      }
    }
    stage("マスターデータ更新") {
      steps {
        script {
          echo "マスターデータ更新"
        }
      }
    }
    stage("アプリバージョン更新") {
      steps {
        script {
          echo "アプリバージョン更新"
        }
      }
    }
  }
  post {
    success {
        echo "OK"
    }
    always {
        echo "Always"
    }
  }
}