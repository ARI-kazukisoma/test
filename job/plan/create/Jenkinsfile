def inputParam = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'UUID', description: 'UUID')
  }
  stages {
    stage("jsonファイルからパラメータ取得") {
      steps {
        script {
          def json = load("lib/json.groovy")
          def slack = load("lib/slack.groovy")
          try {
            def filePath = "${env.TMP_PARAMETER_PATH}/${params.UUID}.json"
            inputParam = json.read(filePath)
            // TODO (m.toga) テスト中のため一旦コメントアウト
            // json.delete(filePath)
          } catch(java.nio.file.NoSuchFileException e) {
            
            // TODO (m.toga) あとでテンプレート化する
            def message = "すでに申請は承認されたか拒否されております。(申請ID: ${params.UUID})" 
            slack.notifyMessage("admin_channel", message)
            error("すでに申請は承認されたか拒否されております。(申請ID: ${params.UUID})")
          }
        }
      }
    }
    stage("インフラ作成") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ]
          ]
          try {
            build job: 'インフラ開発環境構築', parameters: parameters
          } catch(Exception e) {

            // TODO (m.toga) あとでテンプレート化する
            def slack = load("lib/slack.groovy")
            def message = "「インフラ開発環境構築」ジョブにて何らかのエラーが発生(申請ID: ${params.UUID})"
            slack.notifyMessage("admin_channel", message)
            error("「インフラ開発環境構築」ジョブにて何らかのエラーが発生(申請ID: ${params.UUID})")
          } 
        }
      }
    }
    stage("マスターデータ更新") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ],
            [
              $class: 'StringParameterValue',
              name: 'BRANCH',
              value: inputParam.branch
            ],
            [
              $class: 'StringParameterValue',
              name: 'MASTER_TAGS',
              value: inputParam.master_tags
            ]
          ]
          try {
            build job: 'マスターデータ更新', parameters: parameters
          } catch(Exception e) {

            // TODO (m.toga) あとでテンプレート化する
            def slack = load("lib/slack.groovy")
            def message = "「マスターデータ更新」ジョブにて何らかのエラーが発生(申請ID: ${params.UUID})"
            slack.notifyMessage("admin_channel", message)
            error("「マスターデータ更新」ジョブにて何らかのエラーが発生(申請ID: ${params.UUID})")
          } 
        }
      }
    }
    stage("アプリバージョン更新") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ],
            [
              $class: 'StringParameterValue',
              name: 'BRANCH',
              value: inputParam.branch
            ]
          ]
          try {
            build job: 'アプリバージョン更新', parameters: parameters
          } catch(Exception e) {

            // TODO (m.toga) あとでテンプレート化する
            def slack = load("lib/slack.groovy")
            def message = "「アプリバージョン更新」ジョブにて何らかのエラーが発生(申請ID: ${params.UUID})"
            slack.notifyMessage("admin_channel", message)
            error("「アプリバージョン更新」ジョブにて何らかのエラーが発生(申請ID: ${params.UUID})")
          }           
        }
      }
    }
  }
  post {
    success {
        echo "OK"
    }
    always {
        echo "Always"
    }
  }
}