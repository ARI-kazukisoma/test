def inputParam = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'UUID', description: 'UUID')
  }
  stages {
    stage("jsonファイルからパラメータ取得") {
      steps {
        script {
          def json = load("lib/json.groovy")
          try {
            def filePath = "${env.TMP_PARAMETER_PATH}/${params.UUID}.json"
            inputParam = json.read(filePath)
            // TODO (m.toga) テスト中のため一旦コメントアウト
            // json.delete(filePath)
          } catch(java.nio.file.NoSuchFileException e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY001')
            slack.errorMessage("admin_channel", message)
            slack.errorMessage("planner_channel", message)
            error(message)
          }
        }
      }
    }
    stage("インフラ作成") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ]
          ]
          try {
            build job: 'インフラ開発環境構築', parameters: parameters
          } catch(Exception e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY003')
            slack.errorMessage("admin_channel", message)
            slack.errorMessage("planner_channel", message)
            error(message)
          } 
        }
      }
    }
    stage("マスターデータ更新") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ],
            [
              $class: 'StringParameterValue',
              name: 'BRANCH',
              value: inputParam.branch
            ],
            [
              $class: 'StringParameterValue',
              name: 'MASTER_TAGS',
              value: inputParam.master_tags
            ]
          ]
          try {
            build job: 'マスターデータ更新', parameters: parameters
          } catch(Exception e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY004')
            slack.errorMessage("admin_channel", message)
            slack.errroMessage("planner_channel", message)
            error(message)
          } 
        }
      }
    }
    stage("アプリバージョン更新") {
      steps {
        script {
          def parameters = [
            [
              $class: 'StringParameterValue',
              name: 'ENV',
              value: inputParam.target_env
            ],
            [
              $class: 'StringParameterValue',
              name: 'BRANCH',
              value: inputParam.branch
            ]
          ]
          try {
            build job: 'アプリバージョン更新', parameters: parameters
          } catch(Exception e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY005')
            slack.errorMessage("admin_channel", message)
            slack.errorMessage("planner_channel", message)
            error(message)
          }           
        }
      }
    }
    stage("Slackへ結果送信") {
      steps {
        script {
          // 構成ファイルをtmpから正式なディレクトリにコピーする
          dir(env.TMP_ENV_CONFIGURATION_PATH) {
            sh "cp -pr ${inputParam.target_env} ${env.ENV_CONFIGURATION_PATH}/"
          }

          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")

          def binding = [
            'uuid': params.UUID,
            'request_user': inputParam.request_user,
            'request_datetime': inputParam.request_datetime,
            'target_env': inputParam.target_env,
            'branch': inputParam.branch
          ]
          // def message = template.toString('success_create_plan.template', binding)
          // slack.notifyMessage("admin_channel", message)
          // slack.notifyMessage("planner_channel", message)
        }
      }
    }
  }
}