def inputParam = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'UUID', description: 'UUID')
  }
  stages {
    stage("jsonファイルからパラメータ取得") {
      steps {
        script {
          def json = load("lib/json.groovy")
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          try {
            def filePath = "${env.TMP_PARAMETER_PATH}/${params.UUID}.json"
            inputParam = json.read(filePath)
            json.delete(filePath)
          } catch(java.nio.file.NoSuchFileException e) {
            message = template.getSafetyError('SFY002')
            slack.errorMessage("admin_channel", message)
            error(message)
          }
        }
      }
    }
    stage("削除処理実行") {
      steps {
        script {
          echo "削除処理実行"
        }
      }
    }
    stage("構成情報削除") {
      steps {
        script {
          dir(env.ENV_CONFIGURATION_PATH) {
            sh "rm -rf ${inputParam.target_env}"
          }
        }
      }
    }
    stage("Slackへ結果送信") {
      steps {
        script {
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def CONSTS = load("constant/main.groovy").getAll()

          def binding = [
            'uuid': params.UUID,
            'request_user': inputParam.request_user,
            'request_datetime': inputParam.request_datetime,
            'target_env': inputParam.target_env
          ]
          message = template.toString('success_delete_plan.template', binding)
          // TODO エラーになるので調査
          slack.notifyMessage("admin_channel", message, CONSTS)
          slack.notifyMessage("planner_channel", message, CONSTS)
        }
      }
    }
  }
}