def uuid = ''
def now = null
def transMasterTag = ''

pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'ENV', description: 'PLAN環境選択')

  }
  stages {
    stage("入力チェック") {
      steps {
        script {
          def parameterValidate = load("lib/validateParameter.groovy")
          def template = load("lib/template.groovy")
          def slack = load("lib/slack.groovy")
          def errorMessages = []

          def (success, errorCode) = parameterValidate.checkExistsPlanEnv(params.ENV)
          if (success == false) {
            errorMessages.push(template.getValidateError(errorCode, 'ENV'))
          }

          if (errorMessages.size() > 0) {
            message = template.getValidateAllError(errorMessages)
            slack.errorMessage('planner_channel', message)
            error(message)
          }

        }
      }
    }
    stage("パラメータファイル作成") {
      steps {
        script {
          def datetime = load("lib/datetime.groovy")
          now = datetime.now()

          def requestUser = ''
          wrap([$class: 'BuildUser']) {
            requestUser = BUILD_USER
          }

          // 実行に必要なパラメータをjsonファイルに保存
          def param = [
            'request_user': requestUser,
            'target_env': params.ENV,
            'request_datetime': now
          ]
          uuid = UUID.randomUUID().toString()
          def filePath = "${env.TMP_PARAMETER_PATH}/${uuid}.json"
          def json = load("lib/json.groovy")
          json.write(param, filePath)
        }
      }
    }
    stage("Slackへ申請送信") {
      steps {
        script {
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def CONSTS = load("constant/main.groovy").getAll()
          def message = ""

          // 実行ユーザ(BUILD_USER)を取得するためwrapする
          wrap([$class: 'BuildUser']) {
            def binding = [
              'uuid': uuid,
              'request_user': BUILD_USER,
              'target_env': params.ENV,
              'request_datetime': now,
              'approval_link': "${CONSTS.API_URL.APPROVAL_DELETE_PLAN_JOB}&amp;UUID=${uuid}",
              'refusal_link': "${CONSTS.API_URL.REFUSAL_DELETE_PLAN_JOB}&amp;UUID=${uuid}"
            ]
            message = template.toString("request_delete_plan.template", binding)
          }

          slack.notifyMessage("admin_channel", message)
        }
      }
    }
  }
}