pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'ENV', description: 'PlanXXを指定')
  }
  stages {
    stage("環境情報の仮保存") {
      steps {
        script {

          def json = load("../${JOB_NAME}/lib/json.groovy")
          def template = load("../${JOB_NAME}/lib/template.groovy")
          def CONSTS = load("../${JOB_NAME}/constant/main.groovy").getAll()

          def rdsClusterEndpoint = 
            template.toString("env/rds_cluster_endpoint.template", ['env': params.ENV.toLowerCase()])
          def rdsInstanceEndpoint = 
            template.toString("env/rds_instance_endpoint.template", ['env': params.ENV.toLowerCase()])

          def cachePrimaryEndpoint = 
            template.toString("env/cache_primary_endpoint.template", ['env': params.ENV.toLowerCase()])
          def cacheSecondEndpoint = 
            template.toString("env/cache_second_endpoint.template", ['env': params.ENV.toLowerCase()])

          def cname = 
            template.toString("env/cname.template", ['env': params.ENV.toLowerCase()])
          
          def jsonData = [
            'rds_cluster_endpoint': rdsClusterEndpoint,
            'rds_instance_endpoint': rdsInstanceEndpoint,
            'cache_primary_endpoint': cachePrimaryEndpoint,
            'cache_second_endpoint': cacheSecondEndpoint,
            'cname': cname
          ]

          json.createTmpEnvConfFile(jsonData, params.ENV, CONSTS.ENV_CONF_FILE_NAME.PROVISIONING)
        }
      }
    }
    stage("terraformを実行") {
      steps {
        // TODO (m.toga) あとでちゃんとしたノードを設定する
        node("master") {
          sh "echo"
        }
      }
    }
  }
}