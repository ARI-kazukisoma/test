pipeline {
  agent any
  parameters {
    string(name: 'ENV', description: 'PLANxxを指定')
  }
  stages {
    stage("環境情報の仮保存") {
      steps {
        script {
          sh "sleep 20"
          def json = load("lib/json.groovy")
          def template = load("lib/template.groovy")
          def CONSTS = load("constant/main.groovy").getAll()

          def rds_cluster_endpoint = 
            template.toString("plan/rds_cluster_endpoint.template", ['env': params.ENV.toLowerCase()])
          def rds_instance_endpoint = 
            template.toString("plan/rds_instance_endpoint.template", ['env': params.ENV.toLowerCase()])

          def cache_primary_endpoint = 
            template.toString("plan/cache_primary_endpoint.template", ['env': params.ENV.toLowerCase()])
          def cache_second_endpoint = 
            template.toString("plan/cache_second_endpoint.template", ['env': params.ENV.toLowerCase()])

          def cname = 
            template.toString("plan/cname.template", ['env': params.ENV.toLowerCase()])

          dir(env.TMP_ENV_CONFIGURATION_PATH) {
            sh "mkdir -p ${params.ENV}"
            json.write([
              'rds_cluster_endpoint': rds_cluster_endpoint,
              'rds_instance_endpoint': rds_instance_endpoint,
              'cache_primary_endpoint': cache_primary_endpoint,
              'cache_second_endpoint': cache_second_endpoint,
              'cname': cname
            ], "${params.ENV}/${CONSTS.PLAN_CONF_FILE_NAME.PROVISIONING}")
          }
        }
      }
    }
    stage("terraformを実行") {
      steps {
        node("master") {
          sh "echo"
        }
      }
    }
  }
}