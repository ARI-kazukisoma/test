def transMasterTag = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    booleanParam(name: 'IS_DEPLOY_APP', defaultValue: true, description: 'アプリデプロイを実行するか')
    booleanParam(name: 'IS_UPDATE_DATA', defaultValue: true, description: 'マスターアップデートを実行するか')
    string(name: 'ENV', description: 'PLAN環境選択')
    string(name: 'BRANCH', description: 'ブランチ名')
    text(name: 'MASTER_TAGS', description: 'マスタータグ')
  }
  stages {
    stage("ロック処理") {
      steps {
        script {
          def lock = load("lib/lock.groovy")
          if (lock.isLocked(params.ENV)) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError("SFY006")
            slack.notifyMessage("planner_channel", message)
            error(message)
          }
          lock.doLock(params.ENV)
        }
      }
    }
    stage("入力チェック") {
      steps {
        script {
          def parameterValidate = load("lib/validateParameter.groovy")
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def errorMessages = []
          def success = null
          def errorCode = null

          if (!(params.IS_DEPLOY_APP && params.IS_UPDATE_DATA)) {
            errorMessages.push(template.getValidateError("VLD007", 'IS_DEPLOY_APP, IS_UPDATE_DATA'))
          }
          // 環境の入力チェック
          (success, errorCode) = parameterValidate.checkExistsPlanEnv(params.ENV)
          if (success == false) {
            errorMessages.push(template.getValidateError(errorCode, 'ENV'))
          }

          // ブランチの入力チェック
          (success, errorCode) = parameterValidate.checkBranch(params.BRANCH)
          if (success == false) {
            errorMessages.push(template.getValidateError(errorCode, 'BRANCH'))
          }

          // マスタータグの入力チェック
          (success, _transMasterTag, errorCode) = parameterValidate.checkMasterTags(params.MASTER_TAGS)
          if (params.IS_UPDATE_DATA && success == false) {
            errorMessages.push(template.getValidateError(errorCode, 'MASTER_TAGS'))
          }
          transMasterTag = _transMasterTag

          if (errorMessages.size() > 0) {
            message = template.getValidateAllError(errorMessages)
            slack.errorMessage('planner_channel', message)
            error(message)
          }
        }
      }
    }
    // stage("マスターデータ更新") {
    //   steps {
    //     script {
    //       def parameters = [
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'ENV',
    //           value: params.ENV
    //         ],
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'BRANCH',
    //           value: params.BRANCH
    //         ],
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'MASTER_TAGS',
    //           value: params.MASTER_TAGS
    //         ]
    //       ]
    //       try {
    //         build job: 'マスターデータ更新', parameters: parameters
    //       } catch(Exception e) {
    //         def slack = load("lib/slack.groovy")
    //         def template = load("lib/template.groovy")
    //         message = template.getSafetyError('SFY004')
    //         slack.errorMessage("admin_channel", message)
    //         slack.errroMessage("planner_channel", message)
    //         error(message)
    //       } 
    //     }
    //   }
    // }
    // stage("アプリバージョン更新") {
    //   steps {
    //     script {
    //       def parameters = [
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'ENV',
    //           value: params.ENV
    //         ],
    //         [
    //           $class: 'StringParameterValue',
    //           name: 'BRANCH',
    //           value: params.BRANCH
    //         ]
    //       ]
    //       try {
    //         build job: 'アプリバージョン更新', parameters: parameters
    //       } catch(Exception e) {
    //         def slack = load("lib/slack.groovy")
    //         def template = load("lib/template.groovy")
    //         message = template.getSafetyError('SFY005')
    //         slack.errorMessage("admin_channel", message)
    //         slack.errorMessage("planner_channel", message)
    //         error(message)
    //       }           
    //     }
    //   }
    // }
    // stage("構成情報保管") {
    //   steps {
    //     script {
    //       // 構成ファイルをtmpから正式なディレクトリにコピーする
    //       // dir(env.TMP_ENV_CONFIGURATION_PATH) {
    //       //   sh "cp -pr ${inputParam.target_env} ${env.ENV_CONFIGURATION_PATH}/"
    //       // }
    //       echo "aaa"
    //     }
    //   }
    // }
    // stage("Slackへ結果送信") {
    //   steps {
    //     script {
    //       def slack = load("lib/slack.groovy")
    //       def template = load("lib/template.groovy")

    //       def binding = [
    //         'uuid': params.UUID,
    //         'request_user': inputParam.request_user,
    //         'request_datetime': inputParam.request_datetime,
    //         'target_env': inputParam.target_env,
    //         'branch': inputParam.branch
    //       ]
    //       message = template.toString('success_create_plan.template', binding)
    //       // TODO エラーになるので調査
    //       try {
    //         slack.notifyMessage("admin_channel", message)
    //         slack.notifyMessage("planner_channel", message)
    //       } catch(Exception e) {}
    //     }
    //   }
    // }
  }
  post {
    always {
      script {
        def lock = load("lib/lock.groovy")
        lock.doUnlock(params.ENV)
      }
    }
  }
}