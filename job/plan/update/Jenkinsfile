def transMasterTag = null
pipeline {
  agent {node { label 'master' }}
  parameters {
    booleanParam(name: 'IS_DEPLOY_APP', defaultValue: true, description: 'アプリデプロイを実行するか')
    booleanParam(name: 'IS_UPDATE_DATA', defaultValue: true, description: 'マスターアップデートを実行するか')
    string(name: 'ENV', description: 'Plan環境選択')
    string(name: 'BRANCH', description: 'ブランチ名')
    text(name: 'MASTER_TAGS', description: 'マスタータグ')
  }
  stages {
    stage("ロック処理") {
      steps {
        script {
          def lock = load("lib/lock.groovy")
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")

          if (lock.isLocked(params.ENV)) {
            message = template.getSafetyError("SFY006")
            slack.errorMessage("planner_channel", message)
            error(message)
          }

          lock.doLock(params.ENV)

          // 複数環境にまたがる最大同時実行数の確認
          if (lock.isMutiLimitOrver()) {
            message = template.getSafetyError("SFY008")
            slack.errorMessage("planner_channel", message)
            error(message)
          }
        }
      }
    }
    stage("入力チェック") {
      steps {
        script {
          def parameterValidate = load("lib/validateParameter.groovy")
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def errorMessages = []
          def success = null
          def errorCode = null

          if (params.IS_DEPLOY_APP == false && params.IS_UPDATE_DATA == false) {
            errorMessages.push(template.getValidateError("VLD007", 'IS_DEPLOY_APP, IS_UPDATE_DATA'))
          }
          // 環境の入力チェック
          (success, errorCode) = parameterValidate.checkExistsEnv(params.ENV)
          if (success == false) {
            errorMessages.push(template.getValidateError(errorCode, 'ENV'))
          }

          // ブランチの入力チェック
          (success, errorCode, minorVersion) = parameterValidate.checkBranch(params.BRANCH)
          if (success == false) {
            errorMessages.push(template.getValidateError(errorCode, 'BRANCH'))
          }

          // マスタータグの入力チェック
          if (params.IS_UPDATE_DATA) {
            (success, _transMasterTag, errorCode) = parameterValidate.checkMasterTags(params.MASTER_TAGS)
            if (success == false) {
              errorMessages.push(template.getValidateError(errorCode, 'MASTER_TAGS'))
            }
            transMasterTag = _transMasterTag
          }

          if (errorMessages.size() > 0) {
            message = template.getValidateAllError(errorMessages)
            slack.errorMessage('planner_channel', message)
            error(message)
          }
        }
      }
    }
    
    stage("アプリ・マスターデータ更新(並行処理)") {
      parallel {
        stage("マスターデータ更新") {
          steps {
            script {
              if (params.IS_UPDATE_DATA) {
                def parameters = [
                  [
                    $class: 'StringParameterValue',
                    name: 'ENV',
                    value: params.ENV
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'BRANCH',
                    value: params.BRANCH
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'MASTER_TAGS',
                    value: params.MASTER_TAGS
                  ]
                ]
                try {
                  build job: 'マスターデータ更新', parameters: parameters
                } catch(Exception e) {
                  def slack = load("lib/slack.groovy")
                  def template = load("lib/template.groovy")
                  message = template.getSafetyError('SFY004')
                  slack.errorMessage("admin_channel", message)
                  slack.errorMessage("planner_channel", message)
                  error(message)
                } 
              }
            }
          }
        }
        stage("アプリバージョン更新") {
          steps {
            script {
              if (IS_DEPLOY_APP) {
                def parameters = [
                  [
                    $class: 'StringParameterValue',
                    name: 'ENV',
                    value: params.ENV
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'BRANCH',
                    value: params.BRANCH
                  ]
                ]
                try {
                  build job: 'アプリバージョン更新', parameters: parameters
                } catch(Exception e) {
                  def slack = load("lib/slack.groovy")
                  def template = load("lib/template.groovy")
                  message = template.getSafetyError('SFY005')
                  slack.errorMessage("admin_channel", message)
                  slack.errorMessage("planner_channel", message)
                  error(message)
                }           
              }
            }
          }
        }
      }
    }

    stage("接続テスト") {
      steps {
        script {
          try {
            def parameterValidate = load("lib/validateParameter.groovy")
            def (success, errorCode, minorVersion) = parameterValidate.checkBranch(params.BRANCH)
            def parameters = [
              [
                $class: 'StringParameterValue',
                name: 'ENV',
                value: params.ENV
              ],
              [
                $class: 'StringParameterValue',
                name: 'APP_VER',
                value: "1.${minorVersion}"
              ]
            ]
            println parameters
            // TODO (m.toga) 接続確認用の子ジョブを呼び出す
            // build job: ""
          } catch(Exception e) {
            def slack = load("lib/slack.groovy")
            def template = load("lib/template.groovy")
            message = template.getSafetyError('SFY007')
            slack.errorMessage('admin_channel', message)
            slack.errorMessage('planner_channel', message)
          }
        }
      }
    }

    stage("構成情報保管") {
      steps {
        script {
          // 構成ファイルをtmpから正式なディレクトリにコピーする
          def CONSTS = load("constant/main.groovy").getAll()
          def json = load("lib/json.groovy")
          def datetime = load("lib/datetime.groovy")

          if (params.IS_DEPLOY_APP) {
            json.createEnvConfFile(params.ENV, CONSTS.ENV_CONF_FILE_NAME.DEPLOY_APP)
          }
          if (params.IS_UPDATE_DATA) {
            json.createEnvConfFile(params.ENV, CONSTS.ENV_CONF_FILE_NAME.UPDATE_DATA)
          }

          // common.json更新 
          // TODO (m.toga) 今後更新処理が増えてくるようなら更新用の関数を用意する
          def common = json.getEnvConf(params.ENV, CONSTS.ENV_CONF_FILE_NAME.COMMON)
          common['update_datetime'] = datetime.now()
          json.createTmpEnvConfFile(common, params.ENV, CONSTS.ENV_CONF_FILE_NAME.COMMON)
          json.createEnvConfFile(params.ENV, CONSTS.ENV_CONF_FILE_NAME.COMMON)
        }
      }
    }
    stage("Slackへ結果送信") {
      steps {
        script {
          def template = load("lib/template.groovy")
          def slack = load("lib/slack.groovy")
          def CONSTS = load("constant/main.groovy").getAll()

          def requestUser = ''
          wrap([$class: 'BuildUser']) {
            requestUser = BUILD_USER
          }
          def binding = [
            'request_user': requestUser,
            'target_env': params.ENV,
            'branch': params.BRANCH,
            'master_tags': params.MASTER_TAGS
          ]
          message = template.toString('success_update_env.template', binding)
          slack.notifyMessage("admin_channel", message, CONSTS)
          slack.notifyMessage("planner_channel", message, CONSTS)
        }
      }
    }
  }
  post {
    always {
      script {
        def lock = load("lib/lock.groovy")
        lock.doUnlock(params.ENV)
      }
    }
  }
}