def uuid = ''
def now = null
def transMasterTag = ''

pipeline {
  agent {node { label 'master' }}
  parameters {
    string(name: 'ENV', description: 'PLAN環境選択')
    string(name: 'BRANCH', description: 'ブランチ名')
    text(name: 'MASTER_TAGS', description: 'マスタータグ')
    text(name: 'REASON', description: '利用用途')

  }
  stages {
    stage("入力チェック") {
      steps {
        script {
          def parameterValidate = load("lib/validateParameter.groovy")

          // TOOD (m.toga) あとでエラーをslackに投げる処理を入れる
          def (success, _transMasterTag) = parameterValidate.checkMasterTags(params.MASTER_TAGS)
          if (success == false) {
            echo "master tag NG"
          }
          def transMasterTag = _transMasterTag

          if (parameterValidate.checkPlanEnv(params.ENV) == false) {
            echo "env NG"
          }

          if (parameterValidate.checkBranch(params.BRANCH) == false) {
            echo "branch NG"
          }

          if (parameterValidate.checkReason(params.REASON)) == false) {
            echo "reson NG"
          }
        }
      }
    }
    stage("パラメータファイル作成") {
      steps {
        script {
          def datetime = load("lib/datetime.groovy")
          now = datetime.now()

          def requestUser = ''
          wrap([$class: 'BuildUser']) {
            requestUser = BUILD_USER
          }

          // 実行に必要なパラメータをjsonファイルに保存
          def param = [
            'request_user': requestUser,
            'target_env': params.ENV,
            'branch': params.BRANCH,
            'master_tags': transMasterTag,
            'reason': params.REASON,
            'request_datetime': now
          ]
          uuid = UUID.randomUUID().toString()
          def filePath = "${env.TMP_PARAMETER_PATH}/${uuid}.json"
          def json = load("lib/json.groovy")
          json.write(param, filePath)
        }
      }
    }
    stage("Slackへ申請送信") {
      steps {
        script {
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def CONSTS = load("constant/main.groovy").getAll()
          def message = ""

          // 実行ユーザ(BUILD_USER)を取得するためwrapする
          wrap([$class: 'BuildUser']) {
            def binding = [
              'uuid': uuid,
              'request_user': BUILD_USER,
              'target_env': params.ENV,
              'request_datetime': now,
              'branch': params.BRANCH,
              'master_tags': params.MASTER_TAGS,
              'reason': params.REASON,
              'approval_link': "${CONSTS.API_URL.APPROVAL_CREATE_PLAN_JOB}&amp;UUID=${uuid}",
              'refusal_link': "${CONSTS.API_URL.REFUSAL_CREATE_PLAN_JOB}&amp;UUID=${uuid}"
            ]
            message = template.toString("request_create_plan.template", binding)
          }

          slack.notifyMessage("#hooktest", message)
        }
      }
    }
  }
}