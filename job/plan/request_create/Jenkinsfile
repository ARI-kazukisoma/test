def uuid = ''
pipeline {
  agent any
  parameters {
    choice(name: 'ENV', choices: ['PLAN07', 'PLAN08', 'PLAN09', 'PLAN10', 'PLAN11', 'PLAN12', 'PLAN13', 'PLAN14', 'PLAN15', 'PLAN16', 'PLAN17', 'PLAN18', 'PLAN19', 'PLAN20', 'PLAN21', 'PLAN22', 'PLAN23', 'PLAN24', 'PLAN25', 'PLAN26'], description: 'PLAN環境選択')
    string(name: 'BRANCH', description: 'ブランチ名')
    string(name: 'MASTER_TAGS', description: 'マスタータグ')
    text(name: 'REASON', description: '利用用途')

  }
  stages {
    stage("入力チェック") {
      steps {
        script {
          echo "入力チェック"
        }
      }
    }

    stage("パラメータファイル作成") {
      steps {
        script {
          uuid = UUID.randomUUID().toString()
          def filePath = "${env.TMP_PARAMETER_PATH}/${uuid}.json"
          def datetime = load("lib/datetime.groovy")
          echo "${datetime.now()}"
          echo "${datetime.now2()}"
          
        }
      }
    }
    stage("Slackへ申請送信") {
      steps {
        script {
          def slack = load("lib/slack.groovy")
          def template = load("lib/template.groovy")
          def CONSTS = load("constant/main.groovy").get_all()
          def message = ""

          // 実行ユーザ(BUILD_USER)を取得するためwrapする
          wrap([$class: 'BuildUser']) {
            def binding = [
              'request_user': BUILD_USER,
              'target_env': params.ENV,
              'request_datetime': "2018-10-10 10:00:00",
              'branch': params.BRANCH,
              'master_tags': params.MASTER_TAGS,
              'reason': params.REASON,
              'approval_link': CONSTS.API_URL.APPROVAL_CREATE_PLAN_JOB,
              'refusal_link': CONSTS.API_URL.REFUSAL_CREATE_PLAN_JOB
            ]
            message = template.to_string("${pwd()}/template/request_create_plan.template", binding)
          }

          slack.notify_message("#hooktest", message)
        }
      }
    }
  }
}