def uuid = ''
pipeline {
  agent any
  parameters {
    choice(name: 'ENV', choices: ['PLAN07', 'PLAN08', 'PLAN09', 'PLAN10', 'PLAN11', 'PLAN12', 'PLAN13', 'PLAN14', 'PLAN15', 'PLAN16', 'PLAN17', 'PLAN18', 'PLAN19', 'PLAN20', 'PLAN21', 'PLAN22', 'PLAN23', 'PLAN24', 'PLAN25', 'PLAN26'], description: 'PLAN環境選択')
    string(name: 'BRANCH', description: 'ブランチ名')
    string(name: 'MASTER_TAGS', description: 'マスタータグ')
    text(name: 'REASON', description: '利用用途')

  }
  stages {
    stage("入力チェック") {
      steps {
        script {
          echo "入力チェック"
        }
      }
    }

    stage("パラメータファイル作成") {
      steps {
        script {
          uuid = UUID.randomUUID().toString()
          def filePath = "${env.TMP_PARAMETER_PATH}/${uuid}.json"
          def data = [

        }
      }
    }
    stage("Slackへ申請送信") {
      steps {
        script {
          def slack = load("lib/slack.groovy")
          def CONSTS = load("constant/main.groovy").get_all()
          def approvalLink = CONSTS.API_URL.APPROVAL_CREATE_PLAN_JOB
          def refusalLink = CONSTS.API_URL.REFUSAL_CREATE_PLAN_JOB

          message = """
新規払い出しの申請
===========================================
申請者： ${env.BUILD_USER_ID}
環境名： ${params.ENV}
新規申請日時： "2018-10-10 10:00:00"
ブランチ名： ${params.BRANCH}
マスターデータのタグ： ${params.MASTER_TAGS}

<利用用途>

${params.REASON}

===========================================

<${approvalLink}|承認>


<${refusalLink}|拒否>"""
          slack.notify_message("#hooktest", message)
        }
      }
    }
  }
}