@Library('auto-deploy') _

def uuid = ''
def now = null

pipeline {
  agent any
  parameters {
    choice(name: 'ENV', choices: ['PLAN07', 'PLAN08', 'PLAN09', 'PLAN10', 'PLAN11', 'PLAN12', 'PLAN13', 'PLAN14', 'PLAN15', 'PLAN16', 'PLAN17', 'PLAN18', 'PLAN19', 'PLAN20', 'PLAN21', 'PLAN22', 'PLAN23', 'PLAN24', 'PLAN25', 'PLAN26'], description: 'PLAN環境選択')
    string(name: 'BRANCH', description: 'ブランチ名')
    string(name: 'MASTER_TAGS', description: 'マスタータグ')
    text(name: 'REASON', description: '利用用途')

  }
  stages {
    stage("入力チェック") {
      steps {
        script {
          echo "入力チェック"
        }
      }
    }

    stage("パラメータファイル作成") {
      steps {
        script {
          def datetime = new org.datetime.Util()
          now = datetime.now()
          echo now

          def requestUser = ''
          wrap([$class: 'BuildUser']) {
            requestUser = BUILD_USER
          }

          // 実行に必要なパラメータをjsonファイルに保存
          def param = [
            'request_user': requestUser,
            'target_env': params.ENV,
            'branch': params.BRANCH,
            'master_tags': params.MASTER_TAGS,
            'reason': params.REASON,
            'request_datetime': now
          ]
          uuid = UUID.randomUUID().toString()
          def filePath = "${env.TMP_PARAMETER_PATH}/${uuid}.json"
          def json = new org.json.Util()
          json.write(param, filePath)
        }
      }
    }
    stage("Slackへ申請送信") {
      steps {
        script {
          def template = new org.template.Util()

          // 実行ユーザ(BUILD_USER)を取得するためwrapする
          def requestUser = ''
          wrap([$class: 'BuildUser']) {
            requestUser = BUILD_USER
          }

          // def API_URL = org.util.Constants.API_URL
          // def binding = [
          //   'uuid': uuid,
          //   'request_user': requestUser,
          //   'target_env': params.ENV,
          //   'request_datetime': now,
          //   'branch': params.BRANCH,
          //   'master_tags': params.MASTER_TAGS,
          //   'reason': params.REASON,
          //   'approval_link': "${env.JENKINS_URL}${API_URL.APPROVAL_CREATE_PLAN_JOB}&amp;UUID=${uuid}",
          //   'refusal_link': "${env.JENKINS_URL}${API_URL.REFUSAL_CREATE_PLAN_JOB}&amp;UUID=${uuid}"
          // ]
          // def messae = template.toString("request_create_plan.template", binding)

          // Slack通知
          def channel = "#hooktest"
          def credentialsId = org.slack.Constants.CHANNEL_CREDENTIAL_IDS[channel]
          withCredentials([string(credentialsId: credentialsId, variable: 'TOKEN')]) {

            echo "${TOKEN}"
            // slackSend channel: channel, token: token, message: message
          }
        }
      }
    }
  }
}